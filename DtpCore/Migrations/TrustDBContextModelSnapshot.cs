// <auto-generated />
using System;
using DtpCore.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DtpCore.Migrations
{
    [DbContext(typeof(TrustDBContext))]
    partial class TrustDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0");

            modelBuilder.Entity("DtpCore.Model.BlockchainProof", b =>
                {
                    b.Property<int>("DatabaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<long>("BlockTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Blockchain")
                        .HasColumnType("TEXT");

                    b.Property<int>("Confirmations")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("MerkleRoot")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("Receipt")
                        .HasColumnType("BLOB");

                    b.Property<int>("RetryAttempts")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("DatabaseID");

                    b.ToTable("BlockchainProof");
                });

            modelBuilder.Entity("DtpCore.Model.Claim", b =>
                {
                    b.Property<int>("DatabaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Activate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Context")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Created")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Expire")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("Scope")
                        .HasColumnType("TEXT");

                    b.Property<long>("State")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("DatabaseID");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Claim");
                });

            modelBuilder.Entity("DtpCore.Model.ClaimPackageRelationship", b =>
                {
                    b.Property<int?>("ClaimID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PackageID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClaimID", "PackageID");

                    b.HasIndex("PackageID");

                    b.ToTable("ClaimPackageRelationship");
                });

            modelBuilder.Entity("DtpCore.Model.IdentityMetadata", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("IdentityMetadata");
                });

            modelBuilder.Entity("DtpCore.Model.KeyValue", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Value")
                        .HasColumnType("BLOB");

                    b.HasKey("ID");

                    b.HasIndex("Key");

                    b.ToTable("KeyValues");
                });

            modelBuilder.Entity("DtpCore.Model.Package", b =>
                {
                    b.Property<int>("DatabaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Context")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Created")
                        .HasColumnType("INTEGER");

                    b.Property<string>("File")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Id")
                        .HasColumnType("BLOB");

                    b.Property<string>("Obsoletes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Scopes")
                        .HasColumnType("TEXT");

                    b.Property<long>("State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("Types")
                        .HasColumnType("TEXT");

                    b.HasKey("DatabaseID");

                    b.HasIndex("Id");

                    b.ToTable("Package");
                });

            modelBuilder.Entity("DtpCore.Model.Timestamp", b =>
                {
                    b.Property<int>("DatabaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Algorithm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Blockchain")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ClaimDatabaseID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PackageDatabaseID")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Path")
                        .HasColumnType("BLOB");

                    b.Property<int?>("ProofDatabaseID")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Receipt")
                        .HasColumnType("BLOB");

                    b.Property<long>("Registered")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Service")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Source")
                        .HasColumnType("BLOB");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("DatabaseID");

                    b.HasIndex("ClaimDatabaseID");

                    b.HasIndex("PackageDatabaseID");

                    b.HasIndex("ProofDatabaseID");

                    b.HasIndex("Source");

                    b.ToTable("Timestamp");
                });

            modelBuilder.Entity("DtpCore.Model.WorkflowContainer", b =>
                {
                    b.Property<int>("DatabaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.Property<long>("NextExecution")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("DatabaseID");

                    b.HasIndex("State");

                    b.HasIndex("Type");

                    b.ToTable("Workflow");
                });

            modelBuilder.Entity("DtpCore.Model.Claim", b =>
                {
                    b.OwnsOne("DtpCore.Model.IssuerIdentity", "Issuer", b1 =>
                        {
                            b1.Property<int>("ClaimDatabaseID")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Algorithm")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Context")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Id")
                                .HasColumnName("Issuer_Id")
                                .HasColumnType("TEXT");

                            b1.Property<byte[]>("Path")
                                .HasColumnType("BLOB");

                            b1.Property<byte[]>("Proof")
                                .HasColumnType("BLOB");

                            b1.Property<string>("Type")
                                .HasColumnType("TEXT");

                            b1.HasKey("ClaimDatabaseID");

                            b1.ToTable("Claim");

                            b1.WithOwner()
                                .HasForeignKey("ClaimDatabaseID");
                        });

                    b.OwnsOne("DtpCore.Model.SubjectIdentity", "Subject", b1 =>
                        {
                            b1.Property<int>("ClaimDatabaseID")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Algorithm")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Context")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Id")
                                .HasColumnName("Subject_Id")
                                .HasColumnType("TEXT");

                            b1.Property<byte[]>("Path")
                                .HasColumnType("BLOB");

                            b1.Property<byte[]>("Proof")
                                .HasColumnType("BLOB");

                            b1.Property<string>("Type")
                                .HasColumnType("TEXT");

                            b1.HasKey("ClaimDatabaseID");

                            b1.ToTable("Claim");

                            b1.WithOwner()
                                .HasForeignKey("ClaimDatabaseID");
                        });
                });

            modelBuilder.Entity("DtpCore.Model.ClaimPackageRelationship", b =>
                {
                    b.HasOne("DtpCore.Model.Claim", "Claim")
                        .WithMany("ClaimPackages")
                        .HasForeignKey("ClaimID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DtpCore.Model.Package", "Package")
                        .WithMany("ClaimPackages")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DtpCore.Model.Package", b =>
                {
                    b.OwnsOne("DtpCore.Model.ServerIdentity", "Server", b1 =>
                        {
                            b1.Property<int>("PackageDatabaseID")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Algorithm")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Context")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<byte[]>("Path")
                                .HasColumnType("BLOB");

                            b1.Property<byte[]>("Proof")
                                .HasColumnType("BLOB");

                            b1.Property<string>("Type")
                                .HasColumnType("TEXT");

                            b1.HasKey("PackageDatabaseID");

                            b1.ToTable("Package");

                            b1.WithOwner()
                                .HasForeignKey("PackageDatabaseID");
                        });
                });

            modelBuilder.Entity("DtpCore.Model.Timestamp", b =>
                {
                    b.HasOne("DtpCore.Model.Claim", null)
                        .WithMany("Timestamps")
                        .HasForeignKey("ClaimDatabaseID");

                    b.HasOne("DtpCore.Model.Package", null)
                        .WithMany("Timestamps")
                        .HasForeignKey("PackageDatabaseID");

                    b.HasOne("DtpCore.Model.BlockchainProof", "Proof")
                        .WithMany("Timestamps")
                        .HasForeignKey("ProofDatabaseID");
                });
#pragma warning restore 612, 618
        }
    }
}
